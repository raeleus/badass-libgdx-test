plugins {
    id 'org.beryx.runtime' version '1.2.0'
}

apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.ray3k.badasstest.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

runtime {
    distDir = file("$buildDir/install/desktop/lib")
    imageDir = file("$buildDir/badass")
    imageZip = file("$buildDir/badass.zip")
    modules = ['java.base', 'java.desktop', 'jdk.unsupported']
    options = ['--strip-debug', '--no-header-files', '--no-man-pages', '--strip-native-commands', '--compress', '2']
    javaHome = 'C:/OpenJDK/jpackage'
    jpackage {
        jpackageHome = 'C:/OpenJDK/jpackage'
        outputDir = 'badass-jpackage'
        imageName = 'BadassTest'
        skipInstaller = true
    }
}

run {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
    destinationDir = file("$buildDir/install/desktop/lib")
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}
